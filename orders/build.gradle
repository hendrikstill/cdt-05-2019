buildscript {
	ext {
		springBootVersion = "2.1.4.RELEASE"
	}
	repositories {
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:1.2.0"
	}
}

apply plugin: "java"
apply plugin: "org.springframework.boot"
apply plugin: "com.google.cloud.tools.jib"

group = "de.inovex.training.whiskystore.orders"
version = file("VERSION").text.trim()
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	compile(
			"org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}",
			"org.springframework.boot:spring-boot-starter-web:${springBootVersion}",
			"org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}",
			"org.springframework.cloud:spring-cloud-starter-netflix-hystrix:2.1.1.RELEASE",

			"com.h2database:h2:1.4.196",
			"org.postgresql:postgresql:42.2.1",
			"org.flywaydb:flyway-core:5.2.2",
			"com.squareup.retrofit2:retrofit:2.3.0",
			"com.squareup.retrofit2:converter-gson:2.3.0"
	)
}

jib {
	to {
		image = "853161928370.dkr.ecr.eu-central-1.amazonaws.com/${project.property("userPrefix")}-orders"
		tags = [project.version]
	}
}

task awsECRLogin(type: Exec) {
	standardInput = System.in
	executable = "sh"
	args = ["-c", "aws ecr get-login --region eu-central-1 --no-include-email | sh -"]
}

tasks.getByPath("jib").dependsOn("awsECRLogin")

task bumpVersion(type: Exec) {
	executable = "sh"
	args = ["-c", "date +%s > VERSION"]
}

task buildAndDeploy(type: GradleBuild) {
	tasks = ['clean', 'build', 'jib', 'deploy']
}
